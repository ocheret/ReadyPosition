/*
 * Copyright 2003 Charles A. Ocheret.  All Rights Reserved
 *
 * THIS FILE CONTAINS PROPRIETARY AND CONFIDENTIAL INFORMATION AND
 * REMAINS THE UNPUBLISHED PROPERTY OF CHARLES A. OCHERET.
 * USE, DISCLOSURE, OR REPRODUCTION IS PROHIBITED EXCEPT AS PERMITTED
 * BY EXPRESS WRITTEN LICENSE AGREEMENT WITH CHARLES A. OCHERET.
 */

// XXX - This should be machine generated!  I'm tired of editing this stuff
// by hand

package com.readyposition.utils.hash;

import com.readyposition.utils.matrix.IntMatrix;

/**
 * @KEY_NAME@IntsHash is an efficient array oriented hash table
 * with @KEY_TYPE@ keys and integer vector values.
 */
public class @KEY_NAME@IntsHash extends @KEY_NAME@AbstractHash
{
    /**
     * Constructs an empty @KEY_NAME@IntsHash with the specified inital
     * capacity and load factor.
     *
     * @param initialCapacity the initial capacity.
     * @param loadFactor the load factor.
     * @param columns the number of integer values associated with each key.
     */
    public @KEY_NAME@IntsHash(int initialCapacity, float loadFactor,
      int columns)
    {
	super(initialCapacity, loadFactor);
	init(columns);
    }

    /**
     * Constructs an empty @KEY_NAME@IntsHash with the specified inital
     * capacity and the default load factor (0.75)
     * @param columns the number of integer values associated with each key.
     * @param initialCapacity the initial capacity.
     */
    public @KEY_NAME@IntsHash(int initialCapacity, int columns) {
	super(initialCapacity);
	init(columns);
    }

    /**
     * Constructs an empty @KEY_NAME@IntsHash with default
     * capacity (11) and the default load factor (0.75)
     *
     * @param columns the number of integer values associated with each key.
     */
    public @KEY_NAME@IntsHash(int columns) {
	super();
	init(columns);
    }

    protected void init(int columns) {
	m_columns = columns;
	m_values.resize(m_values.getRows(), columns);
    }

    /** The number of integers for each value. */
    protected int m_columns;

    /** Array holding the values to be associated with keys. */
    protected IntMatrix m_values;

    /**
     * Associates a key with a value in the table.  If the table previously
     * contained a mapping for this key, the old value is replaced.
     *
     * @param key key with which the value is to be associated.
     * @param column the column of the value to store.
     * @param value the value to be associated with the specified key.
     * @return the entry number for the key/value pair.
     */
    public int put(@KEY_TYPE@ key, int column, int value) {
	int i = intern(key);
	m_values.set(i, column, value);
	return i;
    }

    /**
     * Replaces the value for a specified entry.
     *
     * @param entry the entry to receive a new value.
     * @param column the column of the value to store.
     * @param value the new value for the entry.
     */
    public void putEntryValue(int entry, int column, int value) {
	m_values.set(entry, column, value);
    }

    /**
     * Retrieves the value associated with a specified key.
     *
     * @param key the key whose associated value we want to retrieve.
     * @param column the column of the value to retrieve.
     * @return the value associated with the key.
     */
    public int get(@KEY_TYPE@ key, int column) {
	int i = getEntry(key);
	if (-1 == i)
	    throw new IndexOutOfBoundsException("No such key " + key);
	return m_values.get(i, column);
    }

    /**
     * Retrieves the value for a specified entry.
     *
     * @param entry the entry whose value we want to retrieve.
     * @param column the column of the value to retrieve.
     * @return the value of the specified entry.
     */
    public int getEntryValue(int entry, int column) {
	return m_values.get(entry, column);
    }

    /**
     * Grow the values array.  All values are copied to the expanded array.
     *
     * @param size the new size of the values array.
     */
    protected void growValues(int size) {
	if (m_values == null) {
	    m_values = new IntMatrix(size, m_columns);
	} else {
	    m_values.resize(size, m_columns);
	}
    }

    /** Clears the values array. */
    protected void clearValues() {
	// Simply replace the matrix with a new matrix of the same size
	m_values = new IntMatrix(m_values.getRows(), m_values.getCols());
    }

    /**
     * Clean up data for the value at a specified entry.
     *
     * @param entry the entry number of the value to clean up.
     */
    protected void removeValue(int entry) {
	// This space deliberately left blank.
    }
}
