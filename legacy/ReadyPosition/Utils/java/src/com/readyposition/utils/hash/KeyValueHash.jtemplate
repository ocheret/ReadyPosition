/*
 * Copyright 2003 Charles A. Ocheret.  All Rights Reserved
 *
 * THIS FILE CONTAINS PROPRIETARY AND CONFIDENTIAL INFORMATION AND
 * REMAINS THE UNPUBLISHED PROPERTY OF CHARLES A. OCHERET.
 * USE, DISCLOSURE, OR REPRODUCTION IS PROHIBITED EXCEPT AS PERMITTED
 * BY EXPRESS WRITTEN LICENSE AGREEMENT WITH CHARLES A. OCHERET.
 */

// XXX - This should be machine generated!  I'm tired of editing this stuff
// by hand

package com.readyposition.utils.hash;

import com.readyposition.utils.itemizer.@KEY_NAME@@VALUE_NAME@Itemizer;

/**
 * @KEY_NAME@@VALUE_NAME@Hash is an efficient array oriented hash table
 * with @KEY_TYPE@ keys and @VALUE_TYPE@ values.
 */
public class @KEY_NAME@@VALUE_NAME@Hash extends @KEY_NAME@AbstractHash {
    /**
     * Constructs an empty @KEY_NAME@@VALUE_NAME@Hash with the specified inital
     * capacity and load factor.
     *
     * @param initialCapacity the initial capacity.
     * @param loadFactor the load factor.
     */
    public @KEY_NAME@@VALUE_NAME@Hash(int initialCapacity, float loadFactor) {
	super(initialCapacity, loadFactor);
    }

    /**
     * Constructs an empty @KEY_NAME@@VALUE_NAME@Hash with the specified inital
     * capacity and the default load factor (0.75)
     *
     * @param initialCapacity the initial capacity.
     */
    public @KEY_NAME@@VALUE_NAME@Hash(int initialCapacity) {
	super(initialCapacity);
    }

    /**
     * Constructs an empty @KEY_NAME@@VALUE_NAME@Hash with default
     * capacity (11) and the default load factor (0.75)
     */
    public @KEY_NAME@@VALUE_NAME@Hash() {
	super();
    }

    /** Array holding the values to be associated with keys. */
    protected @VALUE_TYPE@[] m_values;

    /**
     * Associates a key with a value in the table.  If the table previously
     * contained a mapping for this key, the old value is replaced.
     *
     * @param key key with which the value is to be associated.
     * @param value the value to be associated with the specified key.
     * @return the entry number for the key/value pair.
     */
    public int put(@KEY_TYPE@ key, @VALUE_TYPE@ value) {
	int i = intern(key);
	m_values[i] = value;
	return i;
    }

    /**
     * Replaces the value for a specified entry.
     *
     * @param entry the entry to receive a new value.
     * @param value the new value for the entry.
     */
    public void putEntryValue(int entry, @VALUE_TYPE@ value) {
	m_values[entry] = value;
    }

    /**
     * Retrieves the value associated with a specified key.
     *
     * @param key the key whose associated value we want to retrieve.
     * @return the value associated with the key.
     * @exception IndexOutOfBoundsException if the key is not found in
     *  the table.  To avoid the use of exceptions, call
     *  int getEntry(@KEY_TYPE@ key), check for a -1 result, and optionally
     *  call @VALUE_TYPE@ getEntryValue(int entry).
     */
    public @VALUE_TYPE@ get(@KEY_TYPE@ key) {
	int i = getEntry(key);
	if (-1 == i)
	    throw new IndexOutOfBoundsException("No such key " + key);
	return m_values[i];
    }

    /**
     * Retrieves the value for a specified entry.
     *
     * @param entry the entry whose value we want to retrieve.
     * @return the value of the specified entry.
     */
    public @VALUE_TYPE@ getEntryValue(int entry) {
	return m_values[entry];
    }

    /**
     * Retrieves all of the values in the table.  This array is parallel
     * to the one returned by getEntries and getKeys in the superclass.
     *
     * @return an array of values.
     */
    public @VALUE_TYPE@[] getValues() {
	@VALUE_TYPE@[] theValues = new @VALUE_TYPE@[m_size];
	int count = 0;
	for (int bucket = 0; bucket < m_buckets.length; bucket++)
	    for (int i = m_buckets[bucket]; i != -1;
		 i = m_next[i])
		theValues[count++] = m_values[i];
	return theValues;
    }

    /** Retrives an itemizer for the hash table (like an iterator). */
    public @KEY_NAME@@VALUE_NAME@Itemizer itemizer() {
	return new Itemizer();
    }

    /**
     * Grow the values array.  All values are copied to the expanded array.
     *
     * @param size the new size of the values array.
     */
    protected void growValues(int size) {
	@VALUE_TYPE@[] newValues = new @VALUE_TYPE@[size];
	if (null != m_values)
	    System.arraycopy(m_values, 0, newValues, 0, m_values.length);
	m_values = newValues;
    }

    /** Clears the values array. */
    protected void clearValues() {
	// Simply replace the array with a new array of the same length.
	m_values = new @VALUE_TYPE@[m_values.length];
    }

    /**
     * Clean up data for the value at a specified entry.
     *
     * @param entry the entry number of the value to clean up.
     */
    protected void removeValue(int entry) {
	// This space deliberately left blank.
    }

    /** The Itemizer class for this type of hash table. */
    protected class Itemizer
	extends @KEY_NAME@AbstractHash.Itemizer
	implements @KEY_NAME@@VALUE_NAME@Itemizer
    {
	public @VALUE_TYPE@ value() {
	    return m_values[entry()];
	}
    }
}
