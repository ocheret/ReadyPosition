/*
 * Copyright 2003 Charles A. Ocheret.  All Rights Reserved
 *
 * THIS FILE CONTAINS PROPRIETARY AND CONFIDENTIAL INFORMATION AND
 * REMAINS THE UNPUBLISHED PROPERTY OF CHARLES A. OCHERET.
 * USE, DISCLOSURE, OR REPRODUCTION IS PROHIBITED EXCEPT AS PERMITTED
 * BY EXPRESS WRITTEN LICENSE AGREEMENT WITH CHARLES A. OCHERET.
 */

package com.readyposition.utils.search;

import com.readyposition.utils.comparator.@VALUE_NAME@Cmp;

/**
 * Class for performing binary searches on arrays of @VALUE_TYPE@.
 */
public class @VALUE_NAME@Search
{
    public static int binary(@VALUE_TYPE@ [] values, @VALUE_TYPE@ value,
      @VALUE_NAME@Cmp cmp)
    {
	return binary(values, values.length, value, cmp);
    }

    public static int binary(@VALUE_TYPE@ [] values, int length,
      @VALUE_TYPE@ value, @VALUE_NAME@Cmp cmp)
    {
	int low = 0;
	int high = length - 1;
	int mid = 0;
	while (low <= high) {
	    mid = (low + high) / 2;
	    int comparison = cmp.compare(value, values[mid]);
	    if (0 < comparison)
		low = mid + 1;
	    else if (0 > comparison)
		high = mid - 1;
	    else
		return mid;
	}
	return -(low + 1);
    }
}
